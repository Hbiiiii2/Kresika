/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kresika;

/**
 *
 * @author Hbiiiiii2
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class jAddSchedule extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(jAddSchedule.class.getName());

    /**
     * Creates new form jAddSchedule
     */
    public jAddSchedule() {
        initComponents();

   
        loadTrains();
        loadRoutes();
        loadClasses();

        setTitle("Add New Schedule");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    // --- KELAS HELPER UNTUK ITEM DI COMBOBOX ---
    // Kelas ini membantu menyimpan ID dan Nama di dalam satu item ComboBox.
    private static class ComboBoxItem {

        private final int id;
        private final String name;

        public ComboBoxItem(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        @Override
        public String toString() {
            return name; // Ini yang akan ditampilkan di ComboBox
        }
    } 

    // Method untuk load Table Trains
    private void loadTrains() {
        DefaultComboBoxModel<ComboBoxItem> model = new DefaultComboBoxModel<>();
        try {
            String sql = "SELECT id_kereta, nama_kereta FROM trains ORDER BY nama_kereta";
            koneksi.connect();
            Connection conn = koneksi.con;
            Statement stm = conn.createStatement();
            ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addElement(new ComboBoxItem(res.getInt("id_kereta"), res.getString("nama_kereta")));
            }
            jNameTrainsCB.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load train data: " + e.getMessage());
        }
    }
    
    // Method untuk load Table Route
    private void loadRoutes() {
        DefaultComboBoxModel<ComboBoxItem> model = new DefaultComboBoxModel<>();
        try {
            String sql = "SELECT id_rute, stasiun_tujuan_nama FROM routes ORDER BY stasiun_tujuan_nama";
            koneksi.connect();
            Connection conn = koneksi.con;
            Statement stm = conn.createStatement();
            ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addElement(new ComboBoxItem(res.getInt("id_rute"), res.getString("stasiun_tujuan_nama")));
            }
            jRouteCB.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load route data: " + e.getMessage());
        }
    }
    
    // Method untuk load Table train_Classes
    private void loadClasses() {
        DefaultComboBoxModel<ComboBoxItem> model = new DefaultComboBoxModel<>();
        try {
            String sql = "SELECT id_kelas, kode_kelas FROM train_classes ORDER BY kode_kelas";
            koneksi.connect();
            Connection conn = koneksi.con;
            Statement stm = conn.createStatement();
            ResultSet res = stm.executeQuery(sql);
            while (res.next()) {
                model.addElement(new ComboBoxItem(res.getInt("id_kelas"), res.getString("kode_kelas")));
            }
            jClassOfSeat.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to load class data: " + e.getMessage());
        }
    }
    
    // Method untuk Reset Form atau Default form
    private void resetForm() {
        if (jNameTrainsCB.getItemCount() > 0) {
            jNameTrainsCB.setSelectedIndex(0);
        }
        if (jRouteCB.getItemCount() > 0) {
            jRouteCB.setSelectedIndex(0);
        }
        if (jClassOfSeat.getItemCount() > 0) {
            jClassOfSeat.setSelectedIndex(0);
        }

        jDepartureTime.setText("YYYY-MM-DD HH:MM:SS");
        jArrivalTimes.setText("YYYY-MM-DD HH:MM:SS");
        jTicketPrice.setText("");
        jTrainCode.setText("");
        jTotalSeats.setValue(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jClassOfSeat = new javax.swing.JComboBox<>();
        jNameTrainsCB = new javax.swing.JComboBox<>();
        jRouteCB = new javax.swing.JComboBox<>();
        jDepartureTime = new javax.swing.JTextField();
        jArrivalTimes = new javax.swing.JTextField();
        jTrainCode = new javax.swing.JTextField();
        jTotalSeats = new javax.swing.JSpinner();
        jBtnSave = new javax.swing.JButton();
        jBtnBack = new javax.swing.JButton();
        jTicketPrice = new javax.swing.JTextField();
        jBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jClassOfSeat.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        jClassOfSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClassOfSeatActionPerformed(evt);
            }
        });
        getContentPane().add(jClassOfSeat, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 720, 320, 40));

        jNameTrainsCB.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        getContentPane().add(jNameTrainsCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 270, 830, 40));
        jNameTrainsCB.getAccessibleContext().setAccessibleName("");

        jRouteCB.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        jRouteCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRouteCBActionPerformed(evt);
            }
        });
        getContentPane().add(jRouteCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 490, 830, 40));

        jDepartureTime.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        jDepartureTime.setText("YYYY-MM-DD HH:MM:SS");
        getContentPane().add(jDepartureTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 610, 320, 40));

        jArrivalTimes.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        jArrivalTimes.setText("YYYY-MM-DD HH:MM:SS");
        getContentPane().add(jArrivalTimes, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 610, 400, 40));

        jTrainCode.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        getContentPane().add(jTrainCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 390, 830, 40));

        jTotalSeats.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        getContentPane().add(jTotalSeats, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 720, 400, 40));

        jBtnSave.setContentAreaFilled(false);
        jBtnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 940, 300, 80));

        jBtnBack.setContentAreaFilled(false);
        jBtnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBackActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 940, 270, 80));

        jTicketPrice.setFont(new java.awt.Font("Baloo Da 2", 0, 24)); // NOI18N
        getContentPane().add(jTicketPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 830, 800, 40));

        jBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Add Schedules C.png"))); // NOI18N
        getContentPane().add(jBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        Object trainItem = jNameTrainsCB.getSelectedItem();
        Object routeItem = jRouteCB.getSelectedItem();
        Object classItem = jClassOfSeat.getSelectedItem();

        String departureTimeStr = jDepartureTime.getText().trim();
        String arrivalTimeStr = jArrivalTimes.getText().trim();
        String priceStr = jTicketPrice.getText().trim();
        String trainCode = jTrainCode.getText().trim();
        int totalSeats = (Integer) jTotalSeats.getValue();

        // Validasi sederhana
        if (trainItem == null || routeItem == null || classItem == null
                || departureTimeStr.isEmpty() || arrivalTimeStr.isEmpty() || priceStr.isEmpty() || trainCode.isEmpty()
                || departureTimeStr.equals("YYYY-MM-DD HH:MM:SS") || arrivalTimeStr.equals("YYYY-MM-DD HH:MM:SS")) {
            JOptionPane.showMessageDialog(this, "All fields must be filled in correctly!", "Incomplete Input", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 2. Konversi dan Parsing Data
        ComboBoxItem selectedTrain = (ComboBoxItem) trainItem;
        ComboBoxItem selectedRoute = (ComboBoxItem) routeItem;
        ComboBoxItem selectedClass = (ComboBoxItem) classItem;
        Timestamp departureTimestamp;
        Timestamp arrivalTimestamp;
        double price;

        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            departureTimestamp = new Timestamp(dateFormat.parse(departureTimeStr).getTime());
            arrivalTimestamp = new Timestamp(dateFormat.parse(arrivalTimeStr).getTime());
            price = Double.parseDouble(priceStr);
        } catch (ParseException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Date Format (YYYY-MM-DD HH:MM:SS) or Price (number) is incorrect!", "Wrong Format", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 3. Simpan ke Database
        try {
            // Query diubah untuk tidak menyertakan is_free_cancellation
            String sql = "INSERT INTO schedules (id_kereta, id_rute, id_kelas, train_code, waktu_keberangkatan, waktu_kedatangan, harga, total_kursi, sisa_kursi) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            koneksi.connect();
            Connection conn = koneksi.con;
            PreparedStatement pst = conn.prepareStatement(sql);

            pst.setInt(1, selectedTrain.getId());
            pst.setInt(2, selectedRoute.getId());
            pst.setInt(3, selectedClass.getId());
            pst.setString(4, trainCode);
            pst.setTimestamp(5, departureTimestamp);
            pst.setTimestamp(6, arrivalTimestamp);
            pst.setDouble(7, price);
            pst.setInt(8, totalSeats);
            pst.setInt(9, totalSeats); // sisa_kursi di awal sama dengan total_kursi

            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "The new schedule has been successfully saved!");
            resetForm(); // Kosongkan form setelah berhasil

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to save schedule: " + e.getMessage(), "Error Database", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBtnSaveActionPerformed

    private void jBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBackActionPerformed
        new jHomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jBtnBackActionPerformed

    private void jRouteCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRouteCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRouteCBActionPerformed

    private void jClassOfSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClassOfSeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jClassOfSeatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jAddSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jAddSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jAddSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jAddSchedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new jAddSchedule().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jArrivalTimes;
    private javax.swing.JLabel jBackground;
    private javax.swing.JButton jBtnBack;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JComboBox<kresika.jAddSchedule.ComboBoxItem> jClassOfSeat;
    private javax.swing.JTextField jDepartureTime;
    private javax.swing.JComboBox<kresika.jAddSchedule.ComboBoxItem> jNameTrainsCB;
    private javax.swing.JComboBox<kresika.jAddSchedule.ComboBoxItem> jRouteCB;
    private javax.swing.JTextField jTicketPrice;
    private javax.swing.JSpinner jTotalSeats;
    private javax.swing.JTextField jTrainCode;
    // End of variables declaration//GEN-END:variables
}
